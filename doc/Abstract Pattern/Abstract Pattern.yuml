// {type:class}
// {generate:true}
[note: Abstract Pattern{bg:cornsilk}]
[CallClass||+static main():void{bg:red}]
[<<enum>>;FactoryType|+CC_ENUM_FACTORY_A;+CC_ENUM_FACTORY_B]
[Factory||+generateFactory(FactoryType:type):AbstractFactory]
[<<abstruct>>;AbstractFactory||+abstract getProductA(ProductAType:type):ProductA;+getProductB(ProductBType:type):ProductB]
[<<enum>>;ProductAType|+CC_ENUM_PRODUCT_A_1;+CC_ENUM_PRODUCT_A_2]
[FactoryA||+Override getProductB(ProductBType:type):ProductB;+getProductA(ProductAType:type):ProductA]
[<<interface>>;ProductA||+produceA():String]
[ProductA1||+produceA():String]
[ProductA2||+produceA():String]
[<<enum>>;ProductBType|+CC_ENUM_PRODUCT_B_1;+CC_ENUM_PRODUCT_B_2]
[FactoryB||+Override getProductA(ProductAType:type):ProductA;+getProductB(ProductBType:type):ProductB]
[<<interface>>;ProductB||+produceB():String]
[ProductB1||+produceB():String]
[ProductB2||+produceB():String]
[CallClass]generateFactory->[Factory]
[Factory]-.->[<<enum>>;FactoryType]
[FactoryA]-.->[<<enum>>;ProductAType]
[FactoryB]-.->[<<enum>>;ProductBType]
[Factory]->[<<abstruct>>;AbstractFactory]
[<<abstruct>>;AbstractFactory]^-.-[FactoryA]
[<<abstruct>>;AbstractFactory]^-.-[FactoryB]
[FactoryA]->[<<interface>>;ProductA]
[FactoryB]->[<<interface>>;ProductB]
[FactoryA]-.->[ProductAA]